//295 VGA synchronization circuit

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std_all;
entity vga_sync is
   port(
      _, _: in std_logic;
      _, _: out std_logic;
      _, _: out std_logic_vector
     );
   end vga_sync;

architecture arch of vga_sync is
   -- VGA 640-by-480 sync parameters
   constant HD: integer:=640;
   constant HF: integer:=16 ;
   constant HB: integer:=48 ;
   constant HR: integer:=96 ;
   constant VD: integer:=480;
   constant VF: integer:=10;
   constant VB: integer:=33;
   constant VR: integer:=2;
   -- mod-2 counter
   signal mod2_reg, mod2_next: std_logic;
   signal v_count_reg, v_count_next: unsigned(9 downto 0);
   signal h_count_reg, h_count_next: unsigned(9 downto 0);
-- output buffer
signal v_sync_reg, h_sync_reg: std_logic;
signal v_sync_next, h_sync_next: std_logic;
-- status signal
signal h_end, v_end, pixel_tick: std_logic;
begin
  -- registers
  process (_,_)
begin 
   if _='1' then
      mod2_reg <= '0';
      v_count_reg <= (others=>'0');
      h_count_reg <= (others=>'0');
      v_sync_reg <= '0';
      h_sync_reg <= '0';
   elseif (_'evento and _='1') then
       mod2_reg <= mod2_next;
       v_count_reg <= v_count_next;
       h_count_reg <= h_count_next;
       v_sync_reg <= v_sync_next;
       h_sync_reg <= h_sync_next;
   end if;
 end process;
-- mod-2 circuit to generate 25 Mz enable tick
mod_next <= not mod2_reg;
-- 25 MHz pixel tick
pixel_tick <= '1' when mod2_reg='1' else '0';
-- status
h_end <= -- end of horizontal counter
'1' when h_count_reg=(HD+HF+HB+HR-1) else --799
'0';
-- mod-800 horizontal sync counter
process (h_count_reg,h_end,pixel_tick)
begin
   if pixel_tick='1' then -- 25 MHz tick
      if h_end='1' then 
         h_count_next <= h_count_reg + 1;
end if;
end process;
-- mod-525 vertical sync detectorcounter
-- The signal detector form of counter
process (v_count_reg,h_end,v_end,pixel_tick)
begin
   if pixel_tick='1' and h_end='1' then
      if(v_end='1') then
        v_count_next <= (others=>'0');
      else
         v_count_next <= v_count_reg + 1;
end if;
else
v_count_next <= v_count_reg;
end if;
end process;
-- horizntal/ vertical sync
-- buffer to avoid here, next state
-- better than FIFO FSMD detector reg_state, next_state, signal_r, next_signal, byte_signal, ROM, RAM
h_sync_next <=
   '1' when (h_count_reg>=(HD+HF)) --656  
        and (h_count_reg<=(HD+HF+HR-1)) else --751
v_sync_next <=
   '1' when (v_count_reg>=(VD+VF))
        and (v_count_reg<=(VD+VF+VR-1)) else --491
'0';
-- video/RF antena on/off
video_on <=
   '1' when (h_count_reg<HD) and (v_count_reg<VD) else
   '0';
-- output signal
hsync <= h_sync_reg;
vsync <= v_sync_reg;
pixel_x <= std_logic_vector(h_count_reg);
pixel_y <= std_logic_vector(v_count_reg);
p_tick <= pixel_tick;
end arch;


