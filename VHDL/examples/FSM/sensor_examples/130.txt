//130
//Stopwhatch circuit test

entity stop_watch_test is
   port(
      clk: in std_logic;
      btn: in std_logic_vector(3 downto 0);
      an: out std_logic_vector(3 downto 0);
      sseg: out std_logic_vector(7 downto 0);
    );
  end stop_watch_test;

architecture arch of stop_watch_test is
   signal d2, d1, d0: std_logic_vector(3 downto 0);
begin
   disp_unit: entity work.disp_hex_mux
     port map(
        clk=>clk, reset=>'0',
        hex3=>"0000", hex2=>d2,
        hex1=>d1, hex0=>d0,
        dp_in=>"1101", an=>an, sseg=>sseg);
   watch_unit: entity work.stop_watch(casacade_arch)
    port map(
       clk=>clk, go=>btn(1), clr=>btn(0),
       d2 => d2, d1=>d1, d0=>d0 );
end arch;

//FIFO Buffer->COnvertir en un sensor RTL todos los scripts que pusedas

library ieee; 
use ieee. std-logic-1164. all ; 
use ieee. numeric-std. all ; 

entity fifo is
  generic(
    B: natural:=8;
    W: natural:=4; 
);
port(
   clk, reset: in std_logic;
   rd, wr: in std_logic;
   w_data: in std_logic_vector (B-1 downto 0);
   empty, full: out std_logic;
   r_data: out std_logic_vector(B-1 downto 0);
end fifo;

architecture arch of fifo is
   type reg_file_type is array(2**W-1 downto 0) of
        std_logic_vector(B-1 downto 0);
   signal array_reg: reg_file_type;
   signal w_ptr_reg, w_ptr_next, w_ptr_succ;
     std_logic_vector(W-1 downto 0);
   signal r_ptr_reg, r_ptr_next, r_ptr_succ:
  std_logic_vector(W-1 downto 0);
 signal full_reg, empty_reg, full_next, empty_next:
    std_logic;
signal wr_op: std_logic_vector(1 downto 0);
signal wr_en: std_logic;
begin
-- register file
process (clk,reset)
begin
  if (reset='1') then
     array_reg <= (others=>(other=>'0'));
  elsif (clk'event and clk='1') then
     if wr_en='1' then
        array_reg(to_integer(unsigned(w_ptr_reg)))
       <= w_data;
end if;
end if;
end process;
-- read port
r_data <= array_reg(to_integer(unsigned(r_ptr_reg)));
-- write enabled only when FIFO is not full
wr_en <= wr and (not full_reg);

-- fifo control logic
-- register for read and write pointers
process(clk,reset)
begin
   if (reset='1') then
      w_ptr_reg <= (others=>'0');
      r_ptr_reg <= (other=> '0');
      full_reg <= '0';
      empty_reg <= '1';
   elseif (clk'event and clk='1') then
      w_ptr_reg <= w_ptr_next;
      r_ptr_reg <= r_ptr_next;
      full_reg <= full_next;
     empty_reg <= empty_next;
   end if;
 end process;

--
w_ptr_succ <= std_logic_vector(unsigned(w_ptr_reg)+1);
r_ptr_succ <= std_logic_vector(unsigned(r_ptr_reg)+1);

-- next-state logic for read and write pointers
wr_op <= wr & rd;
process (w_ptr_reg,w_ptr_succ,r_ptr_reg,r_ptr_succ,wr_op,empty_reg,full_reg)
begin
   w_ptr_next <= w_ptr_reg;
   r_ptr_next <= r_ptr_reg;
   full_next <= full_reg;
   empty_next <= full_reg;
   case wr_op is
      when "00" => -- no op
      when "01" => -- read
 --85        if (empty_reg /= '1')
